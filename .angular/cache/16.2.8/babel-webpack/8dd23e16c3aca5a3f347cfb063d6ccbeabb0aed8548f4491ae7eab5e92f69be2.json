{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.customerService = void 0;\nconst http_1 = require(\"@angular/common/http\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"./message.service\");\nlet customerService = /*#__PURE__*/(() => {\n  class customerService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.customersUrl = 'https://my.api.mockaroo.com/customers.json?key=03c46990&size=10'; // URL to web api\n      this.httpOptions = {\n        observe: 'response',\n        headers: new http_1.HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** GET customers from the server */\n    getcustomers() {\n      return this.http.get(this.customersUrl).pipe((0, operators_1.tap)(_ => this.log('fetched customers')), (0, operators_1.catchError)(this.handleError('getcustomers', [])));\n    }\n    /** GET customer by id. Will 404 if id not found */\n    getcustomer(id) {\n      const url = `${this.customersUrl}/${id}`;\n      return this.http.get(url).pipe((0, operators_1.tap)(_ => this.log(`fetched customer id=${id}`)), (0, operators_1.catchError)(this.handleError(`getcustomer id=${id}`)));\n    }\n    //////// Save methods //////////\n    /** POST: add a new customer to the server */\n    addcustomer(customer) {\n      return this.http.post(this.customersUrl, customer, this.httpOptions);\n    }\n    /** DELETE: delete the customer from the server */\n    deletecustomer(id) {\n      const url = `${this.customersUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe((0, operators_1.tap)(_ => this.log(`deleted customer id=${id}`)), (0, operators_1.catchError)(this.handleError('deletecustomer')));\n    }\n    /** PUT: update the customer on the server */\n    updatecustomer(customer) {\n      return this.http.put(this.customersUrl, customer, this.httpOptions).pipe((0, operators_1.tap)(_ => this.log(`updated customer id=${customer.customer_number}`)), (0, operators_1.catchError)(this.handleError('updatecustomer')));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     *\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return (0, rxjs_1.of)(result);\n      };\n    }\n    /** Log a customerService message with the MessageService */\n    log(message) {\n      this.messageService.add(`customerService: ${message}`);\n    }\n    static #_ = this.ɵfac = function customerService_Factory(t) {\n      return new (t || customerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: customerService,\n      factory: customerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return customerService;\n})();\nexports.customerService = customerService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}